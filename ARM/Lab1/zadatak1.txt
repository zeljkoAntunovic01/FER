;TLDR znacenje registara:
;R1 => bazni registar za ucitavanje
;R2 => registar u koji ucitavamo podatke iz memorije
;R3 => prvi operand
;R4 => drugi operand
;R5 => rezultat operacije sa R3 i R4
;R6 => konstanta koja se upisuje u memoriju iza zadnjeg rezultata
;R7 => bazni registar za spremanje rezultata u memoriju    
;R8 => pocetni uvjet petlje i uvjet za izlazak iz programa            
        
        LDR R8, KONST    ;pocetni uvjet petlje i uvjet za izlazak iz programa=0x80808080
        MOV R1, #0x500    ;bazni registar za ucitavanje     
        MOV R7, #0x1000  ;bazni registar za spremanje rezultata u memoriju
        MVN R6, #0x0     ;konstanta koja se upisuje nakon zadnjeg rjesenja=0xFFFFFFFF

PETLJA  LDR R2, [R1], #4  ;ucitavanje memorije na koju pokazuje bazni registar u R2
                          ;u ovom dijelu se ucitava operator te se bazni pomice na
                          ;sljedecu rijec
        CMP R2, R8       ;ako je ucitana vrijednost na mjestu operatora==0x80808080                         
        BEQ EXIT          ;==>izlazi iz programa
        LDMIA R1!, {R3,R4} ;ucitavanje prvog operanda u R3, a drugog u R4 
                           ;bazni registar se povecava za 8 (dvije rijeci==dva registra)
        CMP R2, #0        ;usporedi ucitani broj sa 0, ako je 0 onda zbroji operande
        BEQ ZBROJI  
        CMP R2, #1        ;usporedi ucitani broj sa 1, ako je 1 onda oduzmi operande
        BEQ ODUZMI
        CMP R2, #2        ;usporedi ucitani broj sa 2, ako je 2 onda pomnozi operande   
        BEQ MNOZI
                           ;ne usporedujemo R2 s #3 jer je nepotrebno
DMAIN   MOV SP, #0x2000    ;inicijaliziramo SP
        STMFD SP!, {R3,R4} ;na stog stavljamo operande
        SUB SP, SP, #4     ;stvorimo mjesto za rezultat pomicanjem po stogu za jedno mjesto
        BL DIJELI          ;zovemo potprogram DIJELI
        LDMFD SP!, {R5}    ;spremamo rezultat sa stoga (bivseg osiguranog praznog mjesta)
        ADD SP, SP, #8     ;"cistimo" stog
   
SPREMI STR R5, [R7], #4  ;rezultat se sprema na memorijsku lokaciju koju pokazuje 
                          ;bazni registar za spremanje rezultata
          B PETLJA

ZBROJI ADD R5, R3, R4     ;rezultat operacije spremi u R5
          B SPREMI        ;kada smo gotovi sa operacijom spremamo rezultat

ODUZMI SUB R5, R3, R4     ;rezultat spremi u R5 
           B SPREMI       ;kada smo gotovi spremamo rezultat

MNOZI MUL R5, R3, R4      ;rezultat spremi u R5
         B SPREMI         ;kada smo gotovi spremamo rezultat

DIJELI  STMFD SP!, {R0,R1,R2,R3,R4} ;sacuvamo kontekst prvih 5 registara
        LDR R0, [SP, #24]           ;ucitavamo u R0 prvi operand koji je sada udaljen 6 mjesta od SP-a
        LDR R1, [SP, #28]           ;ucitavamo u R1 drugi operand na isti nacin
        MOV R2, #0                  ;resetiramo registar za spremanje rezultata

        CMP R1, #0                  ;provjeravamo je li drugi operand 0 (djeljenje s nulom daje nulu prema uputi za labos)
        BEQ DVAN                    ;ako je drugi operand nula odma vracamo rezultat R2 koje je 0

        MOV R3, R0, LSR #31         ;u R3 spremamo bit predznaka prvog operanda za provjeru predznaka
        MOV R4, R1, LSR #31         ;u R4 spremamo bit predznaka drugog operanda za provjeru predznaka

        CMP R3, #1                  ;provjeravamo je li predznak prvog operanda negativan
        BNE SKIP1                   ;ako nije, preskacemo dobivanje apsolutne vrijednosti 2'k broja i provjeravamo drugi operand
        MVN R0, R0                  ;dobivanje apsolutne vrijednosti 2'k broja
        ADD R0, R0, #1              

SKIP1   CMP R4, #1                  ;provjeravamo je li predznak drugog operanda negativan
        BNE DPETLJA                 ;ako nije, preskacemo dobivanje apsolutne vrijednosti 2'k broja
        MVN R1, R1                  ;dobivanje apsolutne vrijednosti 2'k broja
        ADD R1, R1, #1  
        
DPETLJA SUBS R0, R0, R1             ;cijelobrojno dijelimo uzastopnim oduzimanjem i brojimo svako uspjesno oduzimanje
        ADDGE R2, R2, #1            ;provjeravamo je li doslo do overflowa (oduzimanje daje negativan rezultat)
        BGE DPETLJA                 ;ako nije ponovno dijelimo i povecavamo Rezultat (R2) za 1

        EOR R3, R3, R4              ;nakon dijeljenja provjeravamo predznak rezultata pomocu XOR operacije nad
                                    ;bitovima predznaka  i spremamo ga opet u R3 da ne koristimo dodatni registar
                                    ;jer nam R3 vise ne treba
                                    ;ako XOR daje rezultat 1 onda je rezultat negativan, u suprotnom je pozitivan
        CMP R3, #1                  ;provjeravamo je li XOR dao rezultat 1
        BNE DVAN                    ;ako rezultat nije negativan onda se preskace pretvorba rezultata u 2'k broj
        MVN R2, R2                  ;pretvaranje rezultata u slucaju da je on uisitnu negativan (R3==1)
        ADD R2, R2, #1
DVAN    STR R2, [SP, #20]           ;spremamo R2 na oslobodenoj poziciji stoga koju smo osigurali u DMAIN-u
        LDMFD SP!, {R0,R1,R2,R3,R4} ;obnavljamo kontekst vracajuci vrijednosti registara prije ulaska u potprogram
        MOV PC, LR                  ;PC stavljamo na LR kako bi nastavili izvodenje programa od poziva samog potprograma
                                    ;u DMAIN-u

EXIT    STR R6, [R7]    ;spremamo broj 0xFFFFFFFF ispod zadnjeg rezultata
                          ;te izlazimo iz programa
        SWI 123456                  
      
              
        

KONST  DW 0x80808080


        ORG 0x500         ;ulazni podatci
        DW  3
        DW  0xFFFFFEFF
        DW  0x00000010
        DW  1
        DW  0x000001F4
        DW  0xFFFFFD44
        DW  2
        DW  0xFFFFFFFE
        DW  0x0000000A
        DW  3
        DW  0xFFFFF000
        DW  0xFFFFFFC0
        DW  0x80808080

        ORG 0x1000       ;izlazni podatci rezultati
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        
        LDMFD SP!, {R0,R1,R2}
        SUBS PC, LR, #4